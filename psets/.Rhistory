setwd("/Users/petertiborcz/Library/CloudStorage/OneDrive-Personal/University/ASDS - LSE/MY457_Causal_Inference_for_Observational_and_Experimental_Studies/lse-my457.github.io/psets")
library(dplyr) # for data management
library(ggplot2) # for graphing
library(ggdag) # for drawing DAGs in Rmarkdown
library(estimatr) # some nice functions for estimating treatment effects in experimental settings
set.seed(02139)
N = 1000
TE = 1
data = tibble(
X = rnorm(N),
U = rnorm(N),
Y0 = TE*0 + 1.5*X + 1*U, # multiply the treatment effect by 0
Y1 = TE*1 + 1.5*X + 1*U  # multiply the treatment effect by 1
)
data
data %>%
ggplot(aes(x = Y0)) +
geom_density(aes(fill = "Y0"), alpha = 0.5) +
geom_density(aes(x = Y1, fill = "Y1"), alpha = 0.5) +
theme_minimal() +
labs(title = "Potential Outcomes", x = "Y", y = "Density")
theory = dagify(Y ~ D + X + U,
D ~ X,
coords = list(
x = c(Y = 4, D = 6, X = 5, U = 4),
y = c(Y = 2, D = 2, X = 3, U = 3)
))
ggdag(theory) +
theme_void() +
remove_axes()
data_selection = data %>%
mutate(D = ifelse(X > 0, rbinom(N, 1, 0.7), rbinom(N, 1, 0.3)),
Y = Y1*D + Y0*(1-D))
data_selection
# Difference-in-means
mean(data_selection$Y[data_selection$D==1]) - mean(data_selection$Y[data_selection$D==0])
# Regression:
lm(Y ~ D, data_selection)
mean(data_selection$Y0[data_selection$D==1]) - mean(data_selection$Y0[data_selection$D==0])
mean(data_selection$Y1[data_selection$D==1]) - mean(data_selection$Y1[data_selection$D==0])
data_selection[data_selection$D==1, ] %>%
ggplot(aes(x = Y0)) +
geom_density(aes(fill = "Y0_treated"), alpha = 0.5) +
geom_density(data = data_selection[data_selection$D==0, ], aes(x = Y0, fill = "Y0_control"), alpha = 0.5) +
theme_minimal() +
labs(title = "Potential Outcomes", x = "Y0", y = "Density")
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# Use randomiser package
library(randomiser)
install.packages(randomizeR)
library(randomizeR)
install.packages('randomizeR', dependencies = TRUE)
library(randomizeR)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
mean(data_selection$Y0[data_selection$D==1]) - mean(data_selection$Y0[data_selection$D==0])
mean(data_selection$Y1[data_selection$D==1]) - mean(data_selection$Y1[data_selection$D==0])
data_selection[data_selection$D==1, ] %>%
ggplot(aes(x = Y0)) +
geom_density(aes(fill = "Y0_treated"), alpha = 0.5) +
geom_density(data = data_selection[data_selection$D==0, ], aes(x = Y0, fill = "Y0_control"), alpha = 0.5) +
theme_minimal() +
labs(title = "Potential Outcomes", x = "Y0", y = "Density")
# Difference-in-means
mean(data_selection$Y[data_selection$D==1]) - mean(data_selection$Y[data_selection$D==0])
# Regression:
lm(Y ~ D, data_selection)
mean(data_selection$Y0[data_selection$D==1]) - mean(data_selection$Y0[data_selection$D==0])
mean(data_selection$Y1[data_selection$D==1]) - mean(data_selection$Y1[data_selection$D==0])
data_selection[data_selection$D==1, ] %>%
ggplot(aes(x = Y0)) +
geom_density(aes(fill = "Y0_treated"), alpha = 0.5) +
geom_density(data = data_selection[data_selection$D==0, ], aes(x = Y0, fill = "Y0_control"), alpha = 0.5) +
theme_minimal() +
labs(title = "Potential Outcomes", x = "Y0", y = "Density")
data_selection = data %>%
mutate(D = ifelse(X > 0, rbinom(N, 1, 0.7), rbinom(N, 1, 0.3)),
Y = Y1*D + Y0*(1-D))
# Difference-in-means
mean(data_selection$Y[data_selection$D==1]) - mean(data_selection$Y[data_selection$D==0])
# Regression:
lm(Y ~ D, data_selection)
mean(data_selection$Y0[data_selection$D==1]) - mean(data_selection$Y0[data_selection$D==0])
mean(data_selection$Y1[data_selection$D==1]) - mean(data_selection$Y1[data_selection$D==0])
data_selection[data_selection$D==1, ] %>%
ggplot(aes(x = Y0)) +
geom_density(aes(fill = "Y0_treated"), alpha = 0.5) +
geom_density(data = data_selection[data_selection$D==0, ], aes(x = Y0, fill = "Y0_control"), alpha = 0.5) +
theme_minimal() +
labs(title = "Potential Outcomes", x = "Y0", y = "Density")
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
# First, randomize via bernoulli trial (simple randomization):
data_simple = data %>%
mutate(D = rbinom(N, 1, 0.5),
Y = Y1*D + Y0*(1-D))
mean(data_simple$D)
# Use randomiser package to implement complete randomization
#install.packages('randomizeR', dependencies = TRUE)
#library(randomizeR)
# Second, complete randomization:
data_complete = slice(data, sample(1:n())) %>%
mutate(D = rep(c(0,1), each = N/2),
Y = Y1*D + Y0*(1-D))
mean(data_complete$D)
mean(data_complete$Y0[data_complete$D==1]) - mean(data_complete$Y0[data_complete$D==0])
mean(data_complete$Y1[data_complete$D==1]) - mean(data_complete$Y1[data_complete$D==0])
data_complete[data_complete$D==1, ] %>%
ggplot(aes(x = Y0)) +
geom_density(aes(fill = "Y0_treated"), alpha = 0.5) +
geom_density(data = data_complete[data_complete$D==0, ], aes(x = Y0, fill = "Y0_control"), alpha = 0.5) +
theme_minimal() +
labs(title = "Potential Outcomes", x = "Y0", y = "Density")
data_complete %>%
ggplot(aes(x = D, y = Y)) +
# add the points, but jitter on the x-axis -- please be *VERY* careful using jitter.
geom_point(position = position_jitter(width = 0.05), alpha = 0.05) +
stat_summary(geom = "point", fun = mean, aes(group = D), size = 1) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, width = 0) +
theme_minimal() +
scale_x_continuous(breaks = c(0,1), labels = c("Control", "Treated")) +
# add text for point estimates:
geom_text(aes(label = round(after_stat(y), 2)), stat = "summary", vjust = -1) +
labs(title = "Mean Values of Y and Treatment Condition", x = "Treatment Status", y = "Y")
library(dplyr) # for data management
library(ggplot2) # for graphing
library(ggdag) # for drawing DAGs in Rmarkdown
library(estimatr) # some nice functions for estimating treatment effects in experimental settings
set.seed(02139)
data_complete %>%
ggplot(aes(x = D, y = Y)) +
# add the points, but jitter on the x-axis -- please be *VERY* careful using jitter.
geom_point(position = position_jitter(width = 0.05), alpha = 0.05) +
stat_summary(geom = "point", fun = mean, aes(group = D), size = 1) +
stat_summary(geom = "errorbar", fun.data = mean_cl_normal, width = 0) +
theme_minimal() +
scale_x_continuous(breaks = c(0,1), labels = c("Control", "Treated")) +
# add text for point estimates:
geom_text(aes(label = round(after_stat(y), 2)), stat = "summary", vjust = -1) +
labs(title = "Mean Values of Y and Treatment Condition", x = "Treatment Status", y = "Y")
