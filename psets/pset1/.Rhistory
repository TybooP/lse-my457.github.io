estimated_ate <- mean(data$Y[data$D == 1]) - mean(data$Y[data$D == 0])
# Store the difference from true ATE
ate_differences[i] <- estimated_ate - tau
}
# Compute the mean of the differences
mean_diff <- mean(ate_differences)
# Plot histogram of ATE differences
ggplot(data.frame(ate_differences), aes(x = ate_differences)) +
geom_histogram(color = "black", fill = "blue", bins = 30, alpha = 0.7) +
geom_vline(aes(xintercept = mean_diff), color = "red", linetype = "dashed") +
labs(
title = "Distribution of Estimated ATE Differences",
x = "Estimated ATE - True ATE",
y = "Frequency"
) +
theme_minimal()
# Set parameters
n_simulations <- 1000
tau <- 5000
n <- 500
# Initialize vector to store deviations
ate_differences <- numeric(n_simulations)
# Run 1,000 simulations
for (i in 1:n_simulations) {
# Generate new random dataset
data <- data.frame(
Age = rnorm(n, mean = 42, sd = 10),
Education = sample(1:4, n, replace = TRUE),
Y0 = rnorm(n, mean = 50000, sd = 10000)
)
# Apply intervention effects
data <- data %>%
mutate(
Y1 = Y0 + tau,
D = sample(c(0, 1), n, replace = TRUE),  # Randomly assign treatment
Y = ifelse(D == 1, Y1, Y0)               # Observed outcome
)
# Estimate ATE (difference-in-means)
estimated_ate <- mean(data$Y[data$D == 1]) - mean(data$Y[data$D == 0])
# Store the difference from true ATE
ate_differences[i] <- estimated_ate - tau
}
# Compute the mean of the differences
mean_diff <- mean(ate_differences)
# Plot histogram of ATE differences
ggplot(data.frame(ate_differences), aes(x = ate_differences)) +
geom_histogram(color = "black", fill = "blue", bins = 30, alpha = 0.7) +
geom_vline(aes(xintercept = mean_diff), color = "red", linetype = "dashed") +
labs(
title = "Distribution of Estimated ATE Differences",
x = "Estimated ATE - True ATE",
y = "Frequency"
) +
theme_minimal()
# Set parameters
n_simulations <- 1000
tau <- 5000
n <- 500
# Initialize vector to store deviations
ate_differences <- numeric(n_simulations)
# Run 1,000 simulations
for (i in 1:n_simulations) {
# Generate new random dataset
data <- data.frame(
Age = rnorm(n, mean = 42, sd = 10),
Education = sample(1:4, n, replace = TRUE),
Y0 = rnorm(n, mean = 50000, sd = 10000)
)
# Apply intervention effects
data <- data %>%
mutate(
Y1 = Y0 + tau,
D = sample(c(0, 1), n, replace = TRUE),  # Randomly assign treatment
Y = ifelse(D == 1, Y1, Y0)               # Observed outcome
)
# Estimate ATE (difference-in-means)
estimated_ate <- mean(data$Y[data$D == 1]) - mean(data$Y[data$D == 0])
# Store the difference from true ATE
ate_differences[i] <- estimated_ate - tau
}
# Compute the mean of the differences
mean_diff <- mean(ate_differences)
# Plot histogram of ATE differences
ggplot(data.frame(ate_differences), aes(x = ate_differences)) +
geom_histogram(color = "black", fill = "blue", bins = 30, alpha = 0.7) +
geom_vline(aes(xintercept = mean_diff), color = "red", linetype = "dashed") +
labs(
title = "Distribution of Estimated ATE Differences",
x = "Estimated ATE - True ATE",
y = "Frequency"
) +
theme_minimal()
# Set parameters
n_simulations <- 1000
tau <- 5000
n <- 500
# Initialize vector to store deviations
ate_differences <- numeric(n_simulations)
# Run 1,000 simulations
for (i in 1:n_simulations) {
# Generate new random dataset
data <- data.frame(
Age = rnorm(n, mean = 42, sd = 10),
Education = sample(1:4, n, replace = TRUE),
Y0 = rnorm(n, mean = 50000, sd = 10000)
)
# Apply intervention effects
data <- data %>%
mutate(
Y1 = Y0 + tau,
D = sample(c(0, 1), n, replace = TRUE),  # Randomly assign treatment
Y = ifelse(D == 1, Y1, Y0)               # Observed outcome
)
# Estimate ATE (difference-in-means)
estimated_ate <- mean(data$Y[data$D == 1]) - mean(data$Y[data$D == 0])
# Store the difference from true ATE
ate_differences[i] <- estimated_ate - tau
}
# Compute the mean of the differences
mean_diff <- mean(ate_differences)
# Plot histogram of ATE differences
ggplot(data.frame(ate_differences), aes(x = ate_differences)) +
geom_histogram(color = "black", fill = "blue", bins = 30, alpha = 0.7) +
geom_vline(aes(xintercept = mean_diff), color = "red", linetype = "dashed") +
labs(
title = "Distribution of Estimated ATE Differences",
x = "Estimated ATE - True ATE",
y = "Frequency"
) +
theme_minimal()
# Load the dta data
electwomen_data<- read_dta("how_to_elect_more_women.dta")
# Load the dta data
electwomen_data<- read_dta
# Load the dta data
electwomen_data<- read.dta("how_to_elect_more_women.dta")
# Load the dta data
electwomen_data <- read.dta("how_to_elect_more_women.dta")
# Load the dta data
electwomen_data <- read.dta13("how_to_elect_more_women.dta")
install.packages("readstata13")
library(readstata13)
# Load the dta data
electwomen_data <- read.dta13("how_to_elect_more_women.dta")
electwomen_data
# create sd_onefem2014 dummy variable from prop_sd_fem2014
electwomen_data <- electwomen_data %>%
mutate(sd_onefem2014 = ifelse(prop_sd_fem2014 > 0, 1, 0))
electwomen_data
# Show the proportion of precincts at each treatment/control group.
prop.table(table(electwomen_data$sd_onefem2014))
library(haven)
library(haven)
# Read the dataset
data <- read_dta("how_to_elect_more_women.dta")
# Create the binary variable
data <- data %>%
mutate(sd_onefem2014 = ifelse(prop_sd_fem2014 > 0, 1, 0))
# Check if the new variable is created correctly
table(data$sd_onefem2014)
data
electwomen_data
library(haven)
# Read the dataset
electwomen_data <- read_dta("how_to_elect_more_women.dta")
# Create sd_onefem2014 dummy variable from prop_sd_fem2014
electwomen_data <- electwomen_data %>%
mutate(sd_onefem2014 = ifelse(prop_sd_fem2014 > 0, 1, 0))
table(electwomen_data$sd_onefem2014)
# Show the proportion of precincts at each treatment/control group.
prop.table(table(electwomen_data$sd_onefem2014))
# Count number of precincts in each treatment/control group
treatment_counts <- data %>%
group_by(treatment_group) %>%
summarise(count = n(),
proportion = count / sum(count))
# Count number of precincts in each treatment/control group
treatment_counts <- electwomen_data %>%
group_by(treatment_group) %>%
summarise(count = n(),
proportion = count / sum(count))
# Count number of precincts in each treatment/control group
treatment_counts <- electwomen_data %>%
group_by(sd_onefem2014 == 0) %>%
summarise(count = n(),
proportion = count / sum(count))
# Print results
print(treatment_counts)
# Count number of precincts in each treatment/control group
treatment_counts <- electwomen_data %>%
group_by(sd_onefem2014 == 0) %>%
summarise(count = n(),
proportion = prop_sd_fem2014 / sum(prop_sd_fem2014))
# Print results
print(treatment_counts)
# Filter precincts where no women were elected in 2014
filtered_data <- electwomen_data %>% filter(sd_onefem2014 == 0)
# Group by treatment assignment and calculate proportions
treatment_summary <- filtered_data %>%
group_by(treatment_group) %>%
summarise(
precinct_count = n(),  # Number of precincts in each group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 for each group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per treatment
)
electwomen_data
#install.packages("readstata13")
library(readstata13)
# Load the dta data
electwomen_data <- read.dta13("how_to_elect_more_women.dta")
# Create sd_onefem2014 dummy variable from prop_sd_fem2014
electwomen_data <- electwomen_data %>%
mutate(sd_onefem2014 = ifelse(prop_sd_fem2014 > 0, 1, 0))
electwomen_data
# Group by 'condition' and calculate required metrics
condition_summary <- electwomen_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Filter for precincts where no women were elected in 2014
filtered_data <- data %>% filter(sd_onefem2014 == NA)
# Group by 'condition' and calculate required metrics
condition_summary <- electwomen_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Filter for precincts where no women were elected in 2014
filtered_data <- data %>% filter(sd_onefem2014 == NA)
# Group by 'condition' and calculate required metrics
condition_summary <- filtered_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Filter for precincts where no women were elected in 2014
filtered_data <- data %>% filter(sd_onefem2014 == "NA")
# Group by 'condition' and calculate required metrics
condition_summary <- filtered_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Filter for precincts where no women were elected in 2014
filtered_data <- electwomen_data %>% filter(sd_onefem2014 == "NA")
# Group by 'condition' and calculate required metrics
condition_summary <- filtered_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Filter for precincts where no women were elected in 2014
filtered_data <- electwomen_data %>% filter(sd_onefem2014 = NA)
# Group by 'condition' and calculate required metrics
condition_summary <- filtered_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Group by 'condition' and calculate required metrics
condition_summary <- electwomen_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014),  # Sum of prop_sd_fem2014 per group
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014)  # Proportion per condition
)
# Print the result
print(condition_summary)
# Check for missing values in prop_sd_fem2014
sum(is.na(data$prop_sd_fem2014))  # How many NAs?
# Check for missing values in prop_sd_fem2014
sum(is.na(electwomen_data$prop_sd_fem2014))  # How many NAs?
# Summarise treatment proportions correctly
condition_summary <- electwomen_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014, na.rm = TRUE),  # Ignore NAs in sum
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014, na.rm = TRUE)  # Correct proportion
)
# Print the updated results
print(condition_summary)
# Check for missing values in prop_sd_fem2014
sum(is.na(electwomen_data$prop_sd_fem2014))
# Filter for precincts where no women were elected in 2014
filtered_data <- electwomen_data %>%
filter(sd_onefem2014 == 0)
# Summarise treatment proportions correctly
condition_summary <- filtered_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014, na.rm = TRUE),  # Ignore NAs in sum
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014, na.rm = TRUE)  # Correct proportion
)
# Print the updated results
print(condition_summary)
# Check for missing values in prop_sd_fem2014
sum(is.na(electwomen_data$prop_sd_fem2014))
# Summarise treatment proportions correctly
condition_summary <- electwomen_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014, na.rm = TRUE),  # Ignore NAs in sum
proportion_fem2014 = sum_fem2014 / sum(filtered_data$prop_sd_fem2014, na.rm = TRUE)  # Correct proportion
)
# Print the updated results
print(condition_summary)
# Ensure there are no missing values
data <- electwomen_data %>% mutate(prop_sd_fem2014 = ifelse(is.na(prop_sd_fem2014), 0, prop_sd_fem2014))
# Group by 'condition' and calculate proportions correctly
condition_summary <- electwomen_data %>%
group_by(condition) %>%
summarise(
precinct_count = n(),  # Number of precincts in each condition group
sum_fem2014 = sum(prop_sd_fem2014, na.rm = TRUE),  # Sum of elected women proportion
proportion_fem2014 = sum_fem2014 / sum(data$prop_sd_fem2014, na.rm = TRUE)  # Proportion per condition
)
# Print results
print(condition_summary)
# Plot the proportion of women elected (prop_sd_fem2014) by condition
ggplot(condition_summary, aes(x = as.factor(condition), y = proportion_fem2014, fill = as.factor(condition))) +
geom_bar(stat = "identity") +
labs(title = "Proportion of Women Elected by Condition",
x = "Condition",
y = "Proportion of Women Elected (2014)") +
theme_minimal()
# Print results
print(condition_summary)
colnames(electwomen_data)
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
t_test_agecat <- t.test(agecat ~ condition, data = electwomen_data)
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
t_test_agecat <- t.test(agecat ~ condition, data = electwomen_data)
colnames(electwomen_data)
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
# ANOVA for agecat across all conditions
anova_agecat <- aov(agecat ~ condition, data = electwomen_data)
summary(anova_agecat)
# ANOVA for race across all conditions
anova_race <- aov(race ~ condition, data = electwomen_data)
summary(anova_race)
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
# Check unique values of 'condition' to confirm the levels
unique(electwomen_data$condition)
# Perform t-test for agecat (Control vs. Supply)
t_test_agecat_control_supply <- electwomen_data %>%
filter(condition %in% c("Control", "Supply")) %>%
t.test(agecat ~ condition, data = .)
# Perform t-test for race (Control vs. Supply)
t_test_race_control_supply <- electwomen_data %>%
filter(condition %in% c("Control", "Supply")) %>%
t.test(race ~ condition, data = .)
# Print results
print(t_test_agecat_control_supply)
print(t_test_race_control_supply)
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
# Check unique values of 'condition' to confirm the levels
unique(electwomen_data$condition)
# Perform t-test for agecat (Control vs. Supply)
report::report(t_test_agecat_control_supply <- electwomen_data %>%
filter(condition %in% c("Control", "Supply")) %>%
t.test(agecat ~ condition, data = .))
# Perform t-test for race (Control vs. Supply)
report::report(t_test_race_control_supply <- electwomen_data %>%
filter(condition %in% c("Control", "Supply")) %>%
t.test(race ~ condition, data = .))
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
# Check unique values of 'condition' to confirm the levels
unique(electwomen_data$condition)
# Perform t-test for agecat (Control vs. Supply)
t_test_agecat_control_supply <- electwomen_data %>%
filter(condition %in% c("Control", "Supply")) %>%
t.test(agecat ~ condition, data = .)
# Perform t-test for race (Control vs. Supply)
t_test_race_control_supply <- electwomen_data %>%
filter(condition %in% c("Control", "Supply")) %>%
t.test(race ~ condition, data = .)
# Print results
print(t_test_agecat_control_supply)
print(t_test_race_control_supply)
#test balance in pre-treatment variables of "agecat" and "race" betwen different conditions
# Define pre-treatment variables
pre_treatment_vars <- c("agecat", "race")
# Define unique conditions (excluding NA)
conditions <- c("Control", "Demand", "Supply", "Supply+Demand")
# Function to perform pairwise t-tests
perform_t_test <- function(var, group1, group2) {
test_result <- electwomen_data %>%
filter(condition %in% c(group1, group2)) %>%
t.test(reformulate("condition", var), data = .)
cat("\nT-test for", var, "between", group1, "and", group2, "\n")
print(test_result)
}
# Run t-tests for each variable between control and each treatment group
for (var in pre_treatment_vars) {
for (group in conditions[conditions != "Control"]) {
perform_t_test(var, "Control", group)
}
}
library(dplyr)
# Function to run linear regression for ATE estimation
estimate_ate <- function(treatment_group) {
# Subset to only include Control and the current treatment group
subset_data <- electwomen_data %>%
filter(condition %in% c("Control", treatment_group)) %>%
mutate(treatment = ifelse(condition == treatment_group, 1, 0))  # Convert to binary
# Run linear regression
model <- lm(sd_onefem2014 ~ treatment, data = subset_data)
# Print results
cat("\nATE Estimate for", treatment_group, "vs. Control:\n")
print(summary(model))
}
# Run regressions for each treatment group
treatment_groups <- c("Demand", "Supply", "Supply+Demand")
for (treatment in treatment_groups) {
estimate_ate(treatment)
}
# Create dummy variables for each treatment group
electwomen_data <- electwomen_data %>%
mutate(
treatment_demand = ifelse(condition == "Demand", 1, 0),
treatment_supply = ifelse(condition == "Supply", 1, 0),
treatment_supply_demand = ifelse(condition == "Supply+Demand", 1, 0)
)
# Run a single regression with all treatment groups
full_model <- lm(sd_onefem2014 ~ treatment_demand + treatment_supply + treatment_supply_demand, data = electwomen_data)
# Print results
summary(full_model)
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, linewidth=60)
# you can include your libraries here:
library(tidyverse)
#install.packages("report")
library(report)
# and any other options in R:
options(scipen=999)
# Print results using report package
report::report(t.test(Age ~ D, data = data))
# this chunk contains code that sets global options for the entire .Rmd.
# we use include=FALSE to suppress it from the top of the document, but it will still appear in the appendix.
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, linewidth=60)
# you can include your libraries here:
library(tidyverse)
#install.packages("report")
library(report)
# and any other options in R:
options(scipen=999)
set.seed(123)
n <- 500
tau <- 5000
data <- data.frame(
Age = rnorm(n, mean = 42, sd = 10),
Education = sample(1:4, n, replace = TRUE),
Y0 = rnorm(n, mean = 50000, sd = 10000)
)
data <- data %>% mutate(
Y1 = Y0 + tau,
D = sample(c(0, 1), n, replace = TRUE),
Y = ifelse(D== 1, Y1, Y0)
)
head(data, 10)
# Print results using report package
report::report(t.test(Age ~ D, data = data))
report::report(Education ~ D, data = data)
# Print results using report package
report::report(t.test(Age ~ D, data = data))
report::report(t.test(Education ~ D, data = data))
# Plot the distribution of Y conditional on D
ggplot(data, aes(x = Y, fill = as.factor(D))) +
geom_histogram(alpha = 0.5) +
labs(title = "Distribution of Y by Treatment Status",
x = "Outcome (Y)",
y = "Density",
fill = "Treatment (D)") +
theme_minimal()
# Plot the distribution of Y conditional on D
ggplot(data, aes(x = Y, fill = as.factor(D))) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Y by Treatment Status",
x = "Outcome (Y)",
y = "Density",
fill = "Treatment (D)") +
theme_minimal()
